<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>R on curve</title>
    <link>/categories/r/</link>
    <description>Recent content in R on curve</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 17 Apr 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/categories/r/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Forcats 和 stringsAsFactors</title>
      <link>/2018/04/17/forcats-stringsasfactors/</link>
      <pubDate>Tue, 17 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/04/17/forcats-stringsasfactors/</guid>
      <description>今天来聊聊 forcats 包和 stringsAsFactors。
一切起因是在我给 map 添加图例的时候发现，分类变量(factor)有大概有快二十个。作为一个完美主义者，自然不能接受一长溜的图例，更重要的其中掺杂一些无足轻重的变量。这时我便想到了 forcats 包中的 fct_collapse() 函数，将其中一些变量折叠(collapse)成“其他”。
library(forcats) partyid2 &amp;lt;- fct_collapse(gss_cat$partyid, missing = c(&amp;quot;No answer&amp;quot;, &amp;quot;Don&amp;#39;t know&amp;quot;), other = &amp;quot;Other party&amp;quot;, rep = c(&amp;quot;Strong republican&amp;quot;, &amp;quot;Not str republican&amp;quot;), ind = c(&amp;quot;Ind,near rep&amp;quot;, &amp;quot;Independent&amp;quot;, &amp;quot;Ind,near dem&amp;quot;), dem = c(&amp;quot;Not str democrat&amp;quot;, &amp;quot;Strong democrat&amp;quot;) ) 看了眼示例，脑补了一下
fct_collapse(factor, A = A, B = B, ... , other = c(K, L, ...) ) 放弃了。坚持不懈的我发现了 frc_lump(). tips：lump(使成块状)。
x &amp;lt;- factor(rep(LETTERS[1:9], times = c(40, 10, 5, 27, 1, 1, 1, 1, 1))) x %&amp;gt;% table() ## .</description>
    </item>
    
    <item>
      <title>线性回归</title>
      <link>/2018/04/06/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/</link>
      <pubDate>Fri, 06 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/04/06/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/</guid>
      <description>(未完成！)
简述 作为统计学的支柱，线性回归有着不可替代的作用。同时线性模型同时还拥有着许多优点：
简单，并可以提供充分可解释的的描述 在面对缺少足够的数据的训练集、低信噪比、稀疏数据时线性模型比一些新奇的非线性模型要优秀。 对输入变量的变化，可扩大其使用范围。 许多非线性模式是线性模型的推广，线性模型是其他模型的基础。  相比其他模型，线性模型似乎是一种简单的模型。但是想要了解透线性模型的方方面面绝非是一件容易的事情。
作为一个实用主义者，我们将通过 R 语言完成线性模型建模的一套流程，并在其中探讨一些细节。
首先，我们认为输入变量 \(X\) 和输出变量 \(Y\) 在现实生活中有着明确的线性关系。
\[ Y=f(X)+\epsilon \]
其中 \(\epsilon\) 为随机误差项，且均值为 0。这代表着，我们的模型是一个概率模型。其有着确定的部分（\(f(X)\)）和不确定的部分（\(\epsilon\)）。现实生活中自变量与因变量之间的关系往往是不确定的，因此我们需要用数据估计出：
\[ \hat{Y}=\hat{f}(X) \]
对应线性模型即为：
\[ \hat { Y } = \hat { \beta } _ { 0} + \hat { \beta } _ { 1} X _ { 1 } + \dots + \hat { \beta } _ { k } X _ { k } \]</description>
    </item>
    
  </channel>
</rss>