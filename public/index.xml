<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>curve</title>
    <link>/</link>
    <description>Recent content on curve</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 15 Apr 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>两个新坑</title>
      <link>/2018/04/15/%E4%B8%A4%E4%B8%AA%E6%96%B0%E5%9D%91/</link>
      <pubDate>Sun, 15 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/04/15/%E4%B8%A4%E4%B8%AA%E6%96%B0%E5%9D%91/</guid>
      <description>AWS &amp;amp; Shiny-server 从第一次见到 Shiny 到现在，Shiny 都一直都深深地吸引着我。你不必懂 JavaScript、CSS 和 HTML 就可生成可交互的 APP。
但是 Shiny 学习起来并不轻松，同时将 Shiny app 部署到网络上， 并分享给朋友也并不是一件容易的事情。虽然 Rstudio 贴心的提供了 shinyapps.io，配合上 Rstudio 可以轻松部署到 web 上。但是免费套餐的诸多限制，和以美元结算的套餐似乎都不是完美是选择。 好在AWS有免费的 EC-2 可以部署服务器，配置 Shiny-server。
但是作为一个非计算机专业的学生，面对着通过的 ssh 连接到 Ubuntu 虚拟机的命令行，让习惯了用 GUI 的系统的我着实一脸懵逼。经过了一番捣鼓，最后还是通过 Louis Aslett 友人提供的 RStudio Server Amazon Machine Image，避免了在完全不熟悉的 Ubuntu 上配置 R、Rstudio-server 和 shiny—server 的麻烦。事实上最初就是卡在这里了。
现在，我们可以通过 web 在浏览器上端访问 Rstudio 愉快地制作 shiny app 了。
附上半年前做的一个关于自改革开放以来的各省人均 GDP 的 APP。</description>
    </item>
    
    <item>
      <title>AIC, Cp and estimators of loss for elliptically symmetric distributions</title>
      <link>/2018/04/14/aic-cp-and-estimators-of-loss-for-elliptically-symmetric-distributions/</link>
      <pubDate>Sat, 14 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/04/14/aic-cp-and-estimators-of-loss-for-elliptically-symmetric-distributions/</guid>
      <description>这个是在查找 $C_p$ 统计量时，无意看到的一篇论文。虽然英文很渣，但是还是获益匪浅（未完&amp;hellip;）
AIC, Cp and estimators of loss for elliptically symmetric distributions Introduction 介绍 The problem of model selection has generated a lot of interest for many decades now and especially recently with the increased size of datasets. In such a context, it is important to model the observed data in a way that accounts for the sparsity of the parameter space. The principle of parsimony helps to avoid classical issues such as overfitting or computational error.</description>
    </item>
    
    <item>
      <title>MapReduce？</title>
      <link>/2018/04/10/mapreduce/</link>
      <pubDate>Tue, 10 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/04/10/mapreduce/</guid>
      <description>一直以来都很好奇 MapReduce 到底是个啥。自己也查阅了一些资料，并未成功的将这个抽象的概念转化为具体的事物。直到前几天帮朋友处理数据的时候，顿时茅塞顿开。原本也并不是什么很困难的事情，只不过友人的电脑可能有些陈旧，读取并合并28个各百万行的数据有些吃力。
想来最近学习了 purrr 包，正好可以一展拳脚。
library(data.table) library(purrr) ## 获取所有 csv 文件(并不严谨哦) csvs &amp;lt;- grep(&amp;quot;.csv&amp;quot;, list.files(), value = TRUE) data &amp;lt;- map(csvs, fread) %&amp;gt;% reduce(rbind)  (28个csv，用 map，fread 读取大概要 27s。reduce(., rbind) 部分要18秒左右。最后得到一个不到3000W行的dataframe。如果你看过我朋友，一个一个 data_i &amp;lt;- read.csv(&amp;hellip;) 的话，你会发现上面的方式是多么的简洁高效。)
map？reduce？MapReduce？似乎在那一刻我明白了点什么。(未完..)</description>
    </item>
    
    <item>
      <title>About</title>
      <link>/about/</link>
      <pubDate>Thu, 05 Apr 2018 21:48:51 -0700</pubDate>
      
      <guid>/about/</guid>
      <description>关于？关于？等我想好了再填吧</description>
    </item>
    
    <item>
      <title>线性回归</title>
      <link>/2018/04/06/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/</link>
      <pubDate>Fri, 06 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/04/06/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/</guid>
      <description>(未完成！)
作为统计学的支柱，线性回归有着不可替代的作用。同时线性模型同时还拥有着许多优点：
简单，并可以提供充分可解释的的描述 在面对缺少足够的数据的训练集、低信噪比、稀疏数据时线性模型比一些新奇的非线性模型要优秀。 对输入变量的变化，可扩大其使用范围。 许多非线性模式是线性模型的推广，线性模型是其他模型的基础。  相比其他模型，线性模型似乎是一种简单的模型。但是想要了解透线性模型的方方面面绝非是一件容易的事情。
作为一个实用主义者，我们将通过 R 语言完成线性模型建模的一套流程，并在其中探讨一些细节。
首先，我们认为输入变量 \(X\) 和输出变量 \(Y\) 在现实生活中有着明确的线性关系。
\[ Y=f(X)+\epsilon \]
其中 \(\epsilon\) 为随机误差项，且均值为 0。这代表着，我们的模型是一个概率模型。其有着确定的部分（\(f(X)\)）和不确定的部分（\(\epsilon\)）。现实生活中自变量与因变量之间的关系往往是不确定的，因此我们需要用数据估计出：
\[ \hat{Y}=\hat{f}(X) \]
对应线性模型即为：
\[ \hat { Y } = \hat { \beta } _ { 0} + \hat { \beta } _ { 1} X _ { 1 } + \dots + \hat { \beta } _ { k } X _ { k } \]</description>
    </item>
    
    <item>
      <title>我的第一篇博客?</title>
      <link>/2018/04/05/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Thu, 05 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/04/05/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</guid>
      <description>虽然并不知道要说些什么, 但不管怎么说第一篇博客终究还是要纪念一下的。
依稀记得学生时代被语文作文支配的恐惧。纠结来纠结去，最后草草了事。现在想想完美主义与生产力多半是冲突的。
以我对我的了解，三分钟热度的我不知道能坚持写几天博客，如果我坚持下来的话，那么就得好好思考思考是我变了，还是写博客有着神奇的魔力。
博客！写什么？随便啦。
如果日后我成为了作家，那我应该会被归类到意识流？
最后，虽然人是善变的，但是这么多年了，我依然想说：下雨天真的是好烦！</description>
    </item>
    
  </channel>
</rss>